import{r as e,o as a,c as i,a as s,F as l,d as n,b as d}from"./app.636d0761.js";const t={},r=n('<h1 id="liuli-util-cli" tabindex="-1"><a class="header-anchor" href="#liuli-util-cli" aria-hidden="true">#</a> @liuli-util/cli</h1><p>一个针对于库和 CLI 应用程序打包的零配置 CLI。</p><h2 id="起步" tabindex="-1"><a class="header-anchor" href="#起步" aria-hidden="true">#</a> 起步</h2><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> -D @liuli-util/cli <span class="token comment"># 局部安装</span>\n<span class="token function">npm</span> i -g @liuli-util/cli <span class="token comment"># 全局安装</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="打包" tabindex="-1"><a class="header-anchor" href="#打包" aria-hidden="true">#</a> 打包</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>liuli-cli build pkg <span class="token comment"># 打包库</span>\nliuli-cli build cli <span class="token comment"># 打包 cli 引用程序</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>添加 <code>-w</code> 选项则启动 rollup 的监视模式，打包出来的 dist/ 不会压缩</p></blockquote><h3 id="生成" tabindex="-1"><a class="header-anchor" href="#生成" aria-hidden="true">#</a> 生成</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>liuli-cli generate <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> --template lib <span class="token comment"># 生成 ts-lib 项目</span>\nliuli-cli generate <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> --template cli <span class="token comment"># 生成 cli 项目</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="其它命令" tabindex="-1"><a class="header-anchor" href="#其它命令" aria-hidden="true">#</a> 其它命令</h3><ul><li><code>clean</code>: 删除 <code>dist</code> 目录，废弃，应该使用 <code>@liuli-util/shell</code> 的 <code>rm</code> 命令</li><li><code>addHusky</code>: 为项目添加一些必须的钩子，包括代码格式、git 提交信息规范化。可能有更好的形式，例如 vue 的可插拔的分别添加或者生成模板项目</li></ul><h2 id="设计理念" tabindex="-1"><a class="header-anchor" href="#设计理念" aria-hidden="true">#</a> 设计理念</h2>',13),o=d("约定大于配置，如果可能应该不提供配置。VitePress 也是这样做的，参考："),c={href:"https://vitepress.vuejs.org/#lighter-page-weight",target:"_blank",rel:"noopener noreferrer"},u=d("https://vitepress.vuejs.org/#lighter-page-weight"),h=n(" 这会导致一些约束，包括以下内容 <ul><li>打包库时入口文件必须是 <code>src/index.ts</code>，出口文件则是 <code>dist/index.esm.js</code> 与 <code>dist/index.js</code></li><li>打包 CLI 时入口文件必须是 <code>src/bin.ts</code>，出口文件则是 <code>dist/bin.js</code></li><li>会将所有的依赖作为外部依赖处理</li></ul>",2),p=n('<h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq" aria-hidden="true">#</a> FAQ</h2><h3 id="为什么底层没有选择-esbuild" tabindex="-1"><a class="header-anchor" href="#为什么底层没有选择-esbuild" aria-hidden="true">#</a> 为什么底层没有选择 esbuild</h3><p>事实上，esbuild 本身非常非常非常快（重要的事情说三遍），但如果使用 js 封装 CLI，则性能会迅速降低。</p><p>打包这个项目使用 esbuild、cli 封装、rollup 的时间对比如下</p><table><thead><tr><th>打包方式</th><th>时间</th></tr></thead><tbody><tr><td>esbuild</td><td>0.49s</td></tr><tr><td>cli 封装</td><td>3.2s</td></tr><tr><td>rollup</td><td>3.65s</td></tr></tbody></table>',5),b=d("现在 "),m={href:"https://code.visualstudio.com/api/working-with-extensions/bundling-extension",target:"_blank",rel:"noopener noreferrer"},g=d("vscode 插件打包官方推荐使用 esbuild"),k=d(" ，吾辈在生产项目中也有过实践，长期而言吾辈比较看好这类更高性能的打包工具。"),f=n('<h3 id="为什么不能包含-liuli-util-工具包" tabindex="-1"><a class="header-anchor" href="#为什么不能包含-liuli-util-工具包" aria-hidden="true">#</a> 为什么不能包含 @liuli-util 工具包</h3><p>这在 monorepo 项目中会导致循环依赖，即 <code>@liuli-util/cli</code> 依赖于 @liuli-util/async，在打包 @liuli-util/async 时，由于 monorepo 会替换 node_modules 中的同名包，进而导致 <code>@liuli-util/async =&gt; @liuli-util/cli =&gt; @liuli-util/async</code> 的依赖查找失败的问题。</p><h3 id="为什么不捆绑外部依赖项" tabindex="-1"><a class="header-anchor" href="#为什么不捆绑外部依赖项" aria-hidden="true">#</a> 为什么不捆绑外部依赖项</h3><p>主要原因是希望将捆绑的工作交由最终应用完成，避免重复捆绑相同的依赖，而且还可以避免处理 nodejs 中直接基于文件系统使用 <code>worker_threads</code> 的问题。</p><h3 id="为什么不再使用-husky-了" tabindex="-1"><a class="header-anchor" href="#为什么不再使用-husky-了" aria-hidden="true">#</a> 为什么不再使用 husky 了</h3>',5),x=d("参考 "),v={href:"https://wiki.rxliuli.com/p/664f86d038744a01894699e368cc2708.html#simple-git-hooks-%E4%B8%BA%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E7%AE%80%E5%8D%95%E7%9A%84-git-%E9%92%A9%E5%AD%90",target:"_blank",rel:"noopener noreferrer"},E=d("simple-git-hooks (opens new window): 为项目配置简单的 git 钩子");t.render=function(n,d){const t=e("OutboundLink");return a(),i(l,null,[r,s("ul",null,[s("li",null,[o,s("a",c,[u,s(t)]),h])]),p,s("blockquote",null,[s("p",null,[b,s("a",m,[g,s(t)]),k])]),f,s("p",null,[x,s("a",v,[E,s(t)])])],64)};export default t;

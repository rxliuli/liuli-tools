import{d as a}from"./app.636d0761.js";const i={},e=a('<h1 id="liuli-util-shell" tabindex="-1"><a class="header-anchor" href="#liuli-util-shell" aria-hidden="true">#</a> @liuli-util/shell</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>在一个 cli 中包含所有常用的 unix* 命令。</p><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> -D @liuli-util/shell\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>命令</p><ul><li>mkdir: 递归创建目录</li><li>rm: 删除文件或目录</li><li>cp: 复制任意文件或目录到指定目录中</li><li>mv: 移动任意文件或目录到指定目录中 <blockquote><p>当要移动的文件只有一个且目标文件不存在，将会重命名而非移动。</p></blockquote></li></ul><p>示例</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mkdir</span> dist/\n<span class="token function">rm</span> dist/\n<span class="token function">cp</span> README.md CNAME dist/\n<span class="token function">mv</span> images/ dist/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq" aria-hidden="true">#</a> FAQ</h2><h3 id="为什么要重复造轮子" tabindex="-1"><a class="header-anchor" href="#为什么要重复造轮子" aria-hidden="true">#</a> 为什么要重复造轮子？</h3><p>因为目前已有工具都不能满足需求</p><ul><li>rimraf: 删除指定目录</li><li>copyfiles: 复制文件</li><li>shx: 使用 nodejs 实现 shell 命令</li></ul><p>主要的不同点在于我们默认覆盖了一些系统命令而非重新创建一个命令，同时增强原生命令的功能。</p><table><thead><tr><th>对比</th><th>@liuli-util/shell</th><th>shx</th></tr></thead><tbody><tr><td>是否包含常用命令</td><td>是</td><td>是</td></tr><tr><td>是否覆盖系统命令</td><td>是</td><td>否</td></tr><tr><td>是否增强命令</td><td>是</td><td>否</td></tr><tr><td>底层依赖</td><td>fs-extra</td><td>shelljs</td></tr></tbody></table><h3 id="为什么全局安装没有覆盖系统命令" tabindex="-1"><a class="header-anchor" href="#为什么全局安装没有覆盖系统命令" aria-hidden="true">#</a> 为什么全局安装没有覆盖系统命令？</h3><p>由于环境变量的加载顺序导致无法覆盖，你应该在项目级别使用它。</p><h3 id="cp-mv-命令的行为似乎有点奇怪" tabindex="-1"><a class="header-anchor" href="#cp-mv-命令的行为似乎有点奇怪" aria-hidden="true">#</a> cp/mv 命令的行为似乎有点奇怪？</h3><ol><li>源文件只有一个 <ol><li>目标位置存在，则复制文件到目录下。例如 <code>cp public dist/</code> 则会将 public 复制到 dist/public</li><li>目标位置不存在，则将之复制并重命名到指定位置。例如 <code>cp public dist/static</code> 则会将 public 复制到 dist/static</li></ol></li><li>源文件有多个，则复制文件到目录下（如果不存在则自动创建）。例如 <code>cp public package.json dist/</code> 则会将 public,package.json 复制到 dist/ 目录</li></ol>',19);i.render=function(a,i){return e};export default i;

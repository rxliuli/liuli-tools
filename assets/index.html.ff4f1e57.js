import{r as n,o as e,c as a,a as l,F as s,b as t}from"./app.c32a0217.js";const r={},i=l("h1",{id:"liuli-util-i18next-dts-gen",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#liuli-util-i18next-dts-gen","aria-hidden":"true"},"#"),t(" @liuli-util/i18next-dts-gen")],-1),c=l("h2",{id:"简介",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#简介","aria-hidden":"true"},"#"),t(" 简介")],-1),u=l("p",null,"i18next 的 typescript 类型定义生成器，可以从多个语言翻译 json 文件中生成类型定义，支持嵌套对象与参数。",-1),o=l("h2",{id:"使用",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#使用","aria-hidden":"true"},"#"),t(" 使用")],-1),p=l("blockquote",null,[l("p",null,"这个 cli 本身国际化配置的类型定义生成也是由 cli 完成的（自举）")],-1),d=l("div",{class:"language-bash ext-sh line-numbers-mode"},[l("pre",{class:"language-bash"},[l("code",null,[t("i18next-dts-gen --input src/i18n "),l("span",{class:"token comment"},"# 扫描这个目录下的 json 文件并生成 index.d.ts 类型定义"),t("\n")])]),l("div",{class:"line-numbers"},[l("span",{class:"line-number"},"1"),l("br")])],-1),h=l("p",null,"详情",-1),b=l("div",{class:"language-bash ext-sh line-numbers-mode"},[l("pre",{class:"language-bash"},[l("code",null,[t("$ i18next-dts-gen -h\nUsage: bin "),l("span",{class:"token punctuation"},"["),t("options"),l("span",{class:"token punctuation"},"]"),t("\n\n根据 json 生成 .d.ts 类型定义\n\nOptions:\n  -i, --input "),l("span",{class:"token operator"},"<"),t("input"),l("span",{class:"token punctuation"},".."),t("."),l("span",{class:"token operator"},">"),t("  包含一或多个翻译文件的目录\n  -w, --watch             是否使用监视模式\n  -h, --help              display "),l("span",{class:"token builtin class-name"},"help"),t(),l("span",{class:"token keyword"},"for"),t(),l("span",{class:"token builtin class-name"},"command"),t("\n")])]),l("div",{class:"line-numbers"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br"),l("span",{class:"line-number"},"6"),l("br"),l("span",{class:"line-number"},"7"),l("br"),l("span",{class:"line-number"},"8"),l("br"),l("span",{class:"line-number"},"9"),l("br")])],-1),x=l("h2",{id:"动机",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#动机","aria-hidden":"true"},"#"),t(" 动机")],-1),m=l("p",null,"为什么已经有了很多第三方的类型定义生成器，甚至最新版 i18next 官方已经推出了 typescript 解决方案，吾辈还要写这个呢？",-1),f=l("p",null,"简而言之，都不完善。",-1),g=l("p",null,"先从 i18next 官方的解决方案说起，它是将 json 文件替换为 ts 文件，但不能支持参数和嵌套对象。",-1),k=l("p",null,"注：最新版似乎利用了 typescript 4.2 的递归类型和模板字符串类型来保证类型安全，但这实际上是不怎么好用的。另外只有 react-i18next 是可用的。",-1),y={href:"https://react.i18next.com/latest/typescript",target:"_blank",rel:"noopener noreferrer"},w=t("i18next typescript support"),j={href:"https://stackoverflow.com/questions/58277973/how-to-type-check-i18n-dictionaries-with-typescript/58308279#58308279",target:"_blank",rel:"noopener noreferrer"},v=t("StackOverflow i18next 的类型定义"),q=t("再来说 "),_={href:"https://github.com/LFDM/i18next-typescript",target:"_blank",rel:"noopener noreferrer"},F=t("i18next-typescript"),O=t(" 这个第三方库，几乎能满足吾辈的需求了，除了一点：支持对象参数。还有像是 Jack 菊苣的 "),J={href:"https://github.com/Jack-Works/i18n-codegen",target:"_blank",rel:"noopener noreferrer"},L=t("i18n-codegen"),A=t("，代码设计上非常优雅，但同样的，不支持 react 之外的生态。"),D=l("p",null,"另外，就吾辈而言，认为使用生成器生成简单的类型要比从类型系统上支持这种功能更加容易，也更加合理。",-1),M=l("h2",{id:"设计",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#设计","aria-hidden":"true"},"#"),t(" 设计")],-1),Q=l("p",null,"架构图",-1),S=l("p",null,[l("img",{src:"/assets/schema.drawio.47f4f1e2.svg",alt:"架构图"})],-1),U=l("p",null,"流程图",-1),W=l("p",null,[l("img",{src:"/assets/flowchart.drawio.6f695511.svg",alt:"流程图"})],-1),$=l("h2",{id:"faq",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#faq","aria-hidden":"true"},"#"),t(" FAQ")],-1),z=l("h3",{id:"是否支持-i18next-的全部特性",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#是否支持-i18next-的全部特性","aria-hidden":"true"},"#"),t(" 是否支持 i18next 的全部特性？")],-1),B=l("p",null,"否，这里支持的仅为 i18next 的一个子集。",-1),C=l("ul",null,[l("li",null,"[x] 为多个本地化 json 配置文件生成类型定义"),l("li",null,[t("[x] 支持包含参数 "),l("ul",null,[l("li",null,"[ ] 不支持对象参数")])]),l("li",null,"[x] 支持嵌套的 key"),l("li",null,"[ ] 不支持配置命名空间、嵌套的分割字符串，我们认为约定大于配置"),l("li",null,"[ ] 不支持 json 之外的配置文件，我们认为 json 文件对于非开发者都更友好，而且在需要时开发者更容易处理"),l("li",null,"[ ] 不支持 i18next 命名空间，即将翻译文件分割")],-1);r.render=function(t,r){const E=n("OutboundLink");return e(),a(s,null,[i,c,u,o,p,d,h,b,x,m,f,g,l("blockquote",null,[k,l("ul",null,[l("li",null,[l("a",y,[w,l(E)])]),l("li",null,[l("a",j,[v,l(E)])])])]),l("p",null,[q,l("a",_,[F,l(E)]),O,l("a",J,[L,l(E)]),A]),D,M,Q,S,U,W,$,z,B,C],64)};export default r;

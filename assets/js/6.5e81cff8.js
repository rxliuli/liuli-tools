(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{356:function(e,t,s){e.exports=s.p+"assets/img/schema.drawio.4914e06d.svg"},357:function(e,t,s){e.exports=s.p+"assets/img/flowchart.drawio.006767c2.svg"},369:function(e,t,s){"use strict";s.r(t);var a=s(44),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"i18next-typescript-generator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#i18next-typescript-generator"}},[e._v("#")]),e._v(" i18next-typescript-generator")]),e._v(" "),a("h2",{attrs:{id:"introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),a("p",[e._v("i18next's typescript type definition generator can generate type definitions from multiple language translation json files, supporting nested objects and parameters.")]),e._v(" "),a("h2",{attrs:{id:"use"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use"}},[e._v("#")]),e._v(" Use")]),e._v(" "),a("blockquote",[a("p",[e._v("The type definition generation of the international configuration of cli itself is also done by cli (bootstrapping)")])]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("i18next-dts-gen gen --input src/i18n "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Scan this directory for json files and generate index.d.ts type definitions")]),e._v("\n")])])]),a("p",[e._v("Detail")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("$ ts-node src/bin.ts -h\nUsage: bin "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n\nGenerate .d.ts "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("type")]),e._v(" definitions from json\n\nOptions:\n  -i, --input "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("."),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("  Directory containing one or "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("more")]),e._v(" translation files\n  -w, --watch             Whether to use "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("watch")]),e._v(" mode\n  -h, --help              display "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("help")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("command")]),e._v("\n")])])]),a("h2",{attrs:{id:"motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),a("p",[e._v("Why should I write this when there are already many third-party type definition generators, and even the latest version of i18next has an official typescript solution?")]),e._v(" "),a("p",[e._v("In short, they are not perfect.")]),e._v(" "),a("p",[e._v("Let's start with the official i18next solution, which replaces json files with ts files, but does not support parameters and nested objects.")]),e._v(" "),a("blockquote",[a("p",[e._v("Note: The latest version seems to take advantage of typescript 4.2's recursive types and template string types for type safety, but this doesn't actually work very well. Also only react-i18next is available.")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://react.i18next.com/latest/typescript",target:"_blank",rel:"noopener noreferrer"}},[e._v("i18next typescript support"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://stackoverflow.com/questions/58277973/how-to-type-check-i18n-dictionaries-with-typescript",target:"_blank",rel:"noopener noreferrer"}},[e._v("StackOverflow type definition for i18next"),a("OutboundLink")],1),e._v(" /58308279#58308279)")])])]),e._v(" "),a("p",[e._v("Then "),a("a",{attrs:{href:"https://github.com/LFDM/i18next-typescript",target:"_blank",rel:"noopener noreferrer"}},[e._v("i18next-typescript"),a("OutboundLink")],1),e._v(", a third-party library, almost meets my needs, except for one thing: support for object parameters. There is also something like Jack Chicory's "),a("a",{attrs:{href:"https://github.com/Jack-Works/i18n-codegen",target:"_blank",rel:"noopener noreferrer"}},[e._v("i18n-codegen"),a("OutboundLink")],1),e._v(", which is very elegant in code design, but again, does not support ecologies other than react.")]),e._v(" "),a("p",[e._v("Also, as far as I'm concerned, I think it's easier and more reasonable to use generators to generate simple types than to support such features from the type system.")]),e._v(" "),a("h2",{attrs:{id:"design"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#design"}},[e._v("#")]),e._v(" Design")]),e._v(" "),a("p",[a("img",{attrs:{src:s(356),alt:"schema"}}),e._v(" "),a("img",{attrs:{src:s(357),alt:"flowchart"}})]),e._v(" "),a("h2",{attrs:{id:"faq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#faq"}},[e._v("#")]),e._v(" FAQ")]),e._v(" "),a("h3",{attrs:{id:"are-all-features-of-i18next-supported"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#are-all-features-of-i18next-supported"}},[e._v("#")]),e._v(" Are all features of i18next supported?")]),e._v(" "),a("p",[e._v("No, only a subset of i18next is supported here.")]),e._v(" "),a("ul",[a("li",[e._v("[x] Generate type definitions for multiple localized json profiles")]),e._v(" "),a("li",[e._v("[x] Include parameters are supported\n"),a("ul",[a("li",[e._v("[ ] Object parameters are not supported")])])]),e._v(" "),a("li",[e._v("[ x] Nested keys are supported")]),e._v(" "),a("li",[e._v("[ ] does not support configuration namespaces, nested split strings, and we consider conventions over configuration")]),e._v(" "),a("li",[e._v("[ ] Configuration files other than json are not supported, we believe json files are more friendly to non-developers and easier for developers to handle when needed")]),e._v(" "),a("li",[e._v("[ ] i18next namespaces are not supported, i.e. translation file splitting")])]),e._v(" "),a("p",[e._v("Translated with www.DeepL.com/Translator (free version)")])])}),[],!1,null,null,null);t.default=n.exports}}]);
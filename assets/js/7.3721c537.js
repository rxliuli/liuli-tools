(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{358:function(t,e,s){t.exports=s.p+"assets/img/schema.drawio.b1110cae.svg"},359:function(t,e,s){t.exports=s.p+"assets/img/flowchart.drawio.99053465.svg"},371:function(t,e,s){"use strict";s.r(e);var a=s(44),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"i18next-typescript-generator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#i18next-typescript-generator"}},[t._v("#")]),t._v(" i18next-typescript-generator")]),t._v(" "),a("h2",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("p",[t._v("i18next 的 typescript 类型定义生成器，可以从多个语言翻译 json 文件中生成类型定义，支持嵌套对象与参数。")]),t._v(" "),a("h2",{attrs:{id:"使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),a("blockquote",[a("p",[t._v("这个 cli 本身国际化配置的类型定义生成也是由 cli 完成的（自举）")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("i18next-dts-gen gen --input src/__tests__/i18n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 扫描这个目录下的 json 文件并生成 index.d.ts 类型定义")]),t._v("\n")])])]),a("p",[t._v("详情")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("$ ts-node src/bin.ts -h\nUsage: bin "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n根据 json 生成 .d.ts 类型定义\n\nOptions:\n  -i, --input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  包含一或多个翻译文件的目录\n  -w, --watch             是否使用监视模式\n  -h, --help              display "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("command")]),t._v("\n")])])]),a("h2",{attrs:{id:"动机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动机"}},[t._v("#")]),t._v(" 动机")]),t._v(" "),a("p",[t._v("为什么已经有了很多第三方的类型定义生成器，甚至最新版 i18next 官方已经推出了 typescript 解决方案，吾辈还要写这个呢？")]),t._v(" "),a("p",[t._v("简而言之，都不完善。")]),t._v(" "),a("p",[t._v("先从 i18next 官方的解决方案说起，它是将 json 文件替换为 ts 文件，但不能支持参数和嵌套对象。")]),t._v(" "),a("blockquote",[a("p",[t._v("注：最新版似乎利用了 typescript 4.2 的递归类型和模板字符串类型来保证类型安全，但这实际上是不怎么好用的。另外只有 react-i18next 是可用的。")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://react.i18next.com/latest/typescript",target:"_blank",rel:"noopener noreferrer"}},[t._v("i18next typescript support"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://stackoverflow.com/questions/58277973/how-to-type-check-i18n-dictionaries-with-typescript/58308279#58308279",target:"_blank",rel:"noopener noreferrer"}},[t._v("StackOverflow i18next 的类型定义"),a("OutboundLink")],1)])])]),t._v(" "),a("p",[t._v("再来说 "),a("a",{attrs:{href:"https://github.com/LFDM/i18next-typescript",target:"_blank",rel:"noopener noreferrer"}},[t._v("i18next-typescript"),a("OutboundLink")],1),t._v(" 这个第三方库，几乎能满足吾辈的需求了，除了一点：支持对象参数。还有像是 Jack 菊苣的 "),a("a",{attrs:{href:"https://github.com/Jack-Works/i18n-codegen",target:"_blank",rel:"noopener noreferrer"}},[t._v("i18n-codegen"),a("OutboundLink")],1),t._v("，代码设计上非常优雅，但同样的，不支持 react 之外的生态。")]),t._v(" "),a("p",[t._v("另外，就吾辈而言，认为使用生成器生成简单的类型要比从类型系统上支持这种功能更加容易，也更加合理。")]),t._v(" "),a("h2",{attrs:{id:"设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计"}},[t._v("#")]),t._v(" 设计")]),t._v(" "),a("p",[t._v("架构图")]),t._v(" "),a("p",[a("img",{attrs:{src:s(358),alt:"架构图"}})]),t._v(" "),a("p",[t._v("流程图")]),t._v(" "),a("p",[a("img",{attrs:{src:s(359),alt:"流程图"}})]),t._v(" "),a("h2",{attrs:{id:"faq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#faq"}},[t._v("#")]),t._v(" FAQ")]),t._v(" "),a("h3",{attrs:{id:"是否支持-i18next-的全部特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是否支持-i18next-的全部特性"}},[t._v("#")]),t._v(" 是否支持 i18next 的全部特性？")]),t._v(" "),a("p",[t._v("否，这里支持的仅为 i18next 的一个子集。")]),t._v(" "),a("ul",[a("li",[t._v("[x] 为多个本地化 json 配置文件生成类型定义")]),t._v(" "),a("li",[t._v("[x] 支持包含参数\n"),a("ul",[a("li",[t._v("[ ] 不支持对象参数")])])]),t._v(" "),a("li",[t._v("[x] 支持嵌套的 key")]),t._v(" "),a("li",[t._v("[ ] 不支持配置命名空间、嵌套的分割字符串，我们认为约定大于配置")]),t._v(" "),a("li",[t._v("[ ] 不支持 json 之外的配置文件，我们认为 json 文件对于非开发者都更友好，而且在需要时开发者更容易处理")]),t._v(" "),a("li",[t._v("[ ] 不支持 i18next 命名空间，即将翻译文件分割")])])])}),[],!1,null,null,null);e.default=r.exports}}]);